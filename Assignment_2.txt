Ans 26: String is a sequence of characters enclosed with single quote or double quote and in most of the lang like c, c++ and java single quote is treated 
	  as char data type but in python we dont have char data type hence its treated as string only.
	  e.g- s='Python' or s="Python"

Ans 27:We can access string using its index like list using +ive and -ive index. e.g- s="Python" so s[0] will give 'P' and if we use s[-1] that will give 'n'.

Ans 28:
string = "Big Data iNeuron"
#desired_output = "iNeuron"
print(string[9:])

Ans29: 

string = "Big Data iNeuron"
#desired_output = "norueNi"
print(string[:-8:-1])

Ans 30:
string = "Big Data iNeuron"
print(string[::-1])
#output: norueNi ataD giB

Ans 31: We can delete entire string at once using del statment.

Ans 32:In string lioterals we use escape sequence to associate a special meaning. If we use \n in between a string then its considerd as new line.
	 e.g- s="Python\nDemo"
		o/p- Python
                 Demo

Ans 33:
s="'iNeuron's Big Data Course'"
print(s)

Ans 34: If you want to represent a group of object as a sinle entity where insertion order is preserved and duplicated are allowed, then we should go with List
        
Ans 35: We create list in python using [] if we dont know the elements, and if we know the elements then we create like list=[1,2,3,'A']

Ans 36:We can use indexing and slice operaotr to access the element of list.

Ans 37:
lst = [1,2,3,"Hi",[45,54, "iNeuron"], "Big Data"]
print(lst[4][2])

Ans 38:
list=eval(input("enter a list"))
print(list)
print(len(list))

Ans 39:
st = ["Welcome", "to", "Data", "course"]
st.insert(3,"Big")
print(st)

Ans 40:
Tupel is same as List except that it is immutable. tuple is read only version of a list.

Ans 41: We create empty tuple in python using parenthesis () and for multivalued tuple () is optional.

Ans 42:After creating a tuple we cant modify its content due to its immutability nature.
	 
Ans 43: yes we can append 2 tupples using + operaotr.
e.g-
tup1=(1,2,"a")
tup2=(1,3,"b")
print(tup1+tup2)


Ans 44:
tup=eval(input("enter a tuple"))
print(tup)
print(len(tup))

Ans 45: If we want to represent a group of unique values as a single entity then we should go with set.

Ans 46: we create set in python using curly braces {} and also by usig set() function.

Ans 47: 
s=set()
s.add("iNeuron")
print(s)

Ans48:

s=set()
s.add("iNeuron")
s.add("Python")
s.add("Data Engineer")
print(s)

Ans 49:To insert a single element we use add() function and to insert multiple elements we use update() function.

Ans 50: To remove all elements from the set we use clear() function.

Ans 51: Its same as set except Frozen set is immutable in nature, hence we cant use add or remove function.

Ans 52: Frozenset is immutable version of set.

ans 53: Suppose we have 2 sets and we use union() function to represent all elements present in both sets.
	  e.g- x={10,20,30,40}
		 y={30,40,50,60}
       	 print(x.union(y)) --> {10,20,30,40,50,60}

Ans 54:Suppose we have 2 sets and we use intersection() function to represent common elements present in both sets.
	e.g- x={10,20,30,40}
	     y={30,40,50,60}
           print(x.intersection(y)) --> {40,30}

Ans 55: If we want to represent a group of objects as key-value pairs then we should go for Dictionary.

Ans 56: To represent a group of individual object as single entity we use list tuple set data structure but to represent a group of object as a key value pair
	  we use dictionary.

Ans 57: We use {} and dict() to create dictionary in python

Ans 58: 
var = {}
print(type(var))

output will be dict.

Ans 59:We can add an element in dictioanry using key e.g d[key]=value. If the key is already available then old value will be replaced with new value.

Ans 60:
d={100:"me",200:"you",300:"mahakal"}
print(d.values())
for v in d.values():
    print(v)

Ans 61:
emp = {1: {'name': 'Prashant', 'age': '27', 'sex': 'Male'},
          2: {'name': 'Shashank', 'age': '28', 'sex': 'Male'}}
          
for k,v in emp.items():
    print(v)

Ans 62: get() function is used to get the value associated with the key.

Ans 63:items() function  is used to return the items with all dictionary keys with values.

Ans 64: pop() function is used to removes the entry(key,value) associated with the specified key and returns the corresponding value.

Ans 65: popitem() is uesd to remove an arbitrary item(key-value) from the dictionaty and returns it as tuple. 
        e.g:
d={100:"Prashant",200:"Shashank"} 
print(d) #{100: 'Prashant', 200: 'Shashank'}
print(d.popitem()) #(200, 'Shashank')
print(d)#{100: 'Prashant'}

Ans 66:keys() function is used to get all keys associated eith dictionary.

Ans 67: values() function is used to get all values associated eith dictionary.

Ans 68: Loops are nothing but to iterate over the items.I mean if we want to execute a group of statements multiple times then we should go for 
iterative statements(for and while).

Ans 69:there are two types of loop in Python.1) for loop 2)while loop

Ans 70: if we know the no of the iterations then we go with for loop and if we dont know the no of iterations then we should go with while loop.

Ans 71:continue is used to skip the current iteration and continue with the next oterations.

Ans 72:break is used to exit from the iteration.

Ans 73: pass is nothing but empty statement, it wont do anything. Sometimes in the parent class we have to declare a function with empty body and child 
class responsible to provide proper implementation. Such type of empty body we can define by using pass keyword.

Ans 74:range () function is used to return sequence of numbers.

Ans 75:we can loop over a dict using keys() directly or using items() functions or using values() in for loop.

##########################################################################################################################################
Coding solutions:

Ans 76:
def fact(n):
    if n==0:
        return 1
    return n*fact(n-1)
x=int(input("Enter any number to find factorial!!!"))
print(fact(x))


Ans 77:
def simple_interest(p,r,t):
    return (p*r*t)/100

x,y,z=100,10,2
print(simple_interest(x,y,z))

Ans 78:
def compound_interest(p,r,t):
    result= res=int(p*(1+r/100))^t
    return result

x,y,z=100,10,2
print(compound_interest(x,y,z))

Ans 79:
def prime(n):
    for i in range(2,n):
        if n%i==0:
            print("Not a prime number")
            break
    else:
        print("Its a prime number")

x=int(input("Enter number to check prime number"))
prime(x)

    
Ans 80:
def armstong_no(num):
    temp=num
    sum1=0
    power=len(str(num))
    
    while num !=0:
        rem = num%10
        sum1= sum1+(rem**power)
        num=num//10
    if temp==sum1:
        print(temp, "is armstrong number")
    else:
        print(temp, "is not armstrong number")
        
x=int(input("Enter no to check armstrong number"))
armstong_no(x)

        
Ans 81:
def nth_fibbo(n):
    a,b=0,1
    print(a,b,sep="\n")
    for i in range(2,n+1):
        c=a+b
        a=b
        b=c
        print(c)
x=int(input("Enter a number to get nth fibbonacci"))
nth_fibbo(x)

Ans 82:
def list_modify(lst):
    length=len(lst)
    temp=lst[0]
    lst[0]= lst[length-1]
    lst[length-1]= temp
    
    return lst
lst=[1,2,3,4,5,6,8]
print(list_modify(lst))

Ans 83:

def list_modify(lst,position1,position2):
    lst[position1],lst[position2]=lst[position2],lst[position1]
    return lst
    
lst=[1,2,3,4,5,6,8]
x=2
y=4
print(list_modify(lst,x,y))

Ans 84:

def nth_largest_element_list(lst,n):
    sorted_list=sorted(lst,reverse=True)
    print(sorted_list)
    print (n,"th","largest element in list:", sorted_list[n-1])
    
list1 = [12, 35, 9, 56, 24]
x=int(input("enter index to find largest no at that index"))
nth_largest_element_list(list1,x)

Ans 85:
def sum_list(lst):
    sum=0
    for i in lst:
        sum=sum+i
    print (sum)
    
list1 = [12, 35, 9, 56, 24]
sum_list(list1)
    

Ans 86:
def is_pallindrome(str1):
    temp=str1
    str1=str1[::-1]
    if temp==str1:
        print("Its Pallindrome")
    else:
        print("Its not Pallindrome")
    
input_str=input("Enter String to check pallindrome ")
is_pallindrome(input_str)

Ans 87:
input_str = "Python_demo"

# Removing element at pos 6
output_str = ""

for i in range(len(input_str)):
	if i != 6:
		output_str = output_str + input_str[i]
print ("The string after removal : " + output_str)


Ans 88:
input_str = input("Enter String ")
sub_str=input("Enter substring to find in input_str ")

if sub_str in input_str:
	print("Substring is present in the string")
else:
	print("Substring is not present")


Ans 89:
input_str=input("Enter String") 
k=int(input("Enter lenght to find string in input_str"))
s=input_str.split(" ")
result=list(filter(lambda x: (len(x)>k),s))
print(result)


Ans 91:

def dict_merge(dict1, dict2):
	return(dict1.update(dict2))

dict1 = {101: "Shashank", 102: "Prashant"}
dict2 = {103: "Rahul", 104: "Ritesh"}
print(dict_merge(dict1, dict2))
print(dict1)


Ans 92:
def tup_to_dict(tup,dict_output):
    dict_output=dict(tup)
    return dict_output

Input = [('Sachin', 10), ('MSD', 7), ('Kohli', 18), ('Rohit', 45)]
dictionary = {}

print(tup_to_dict(Input,dictionary))

Ans 93:
list = [9, 5, 6]
result=[(i,pow(i,3))for i in list]
print(result)

Ans 94:
from itertools import chain,product
test_tuple1 = (7, 2)
test_tuple2 = (7, 8)

print("The original tuple 1 : " + str(test_tuple1))
print("The original tuple 2 : " + str(test_tuple2))

result = list(chain(product(test_tuple1, test_tuple2), product(test_tuple2, test_tuple1)))
print("The combination of given two tuples: " + str(result))


And 95:
def Sort_Tuple(tup):
	tup.sort(key = lambda x: x[1])
	return tup

tup = [('for', 24), ('Geeks', 8), ('Geeks', 30)] 
print(Sort_Tuple(tup))


Ans 96:
n=int(input("Enter the number of rows:")) 
for i in range(1,n+1): 
    for j in range(1,i+1): 
        print("*",end=" ") 
    print()

Ans 97:

n=int(input("Enter the number of rows:")) 
for i in range(1,n): 
    for k in range(1,n-i):
        print(" ", end="")
    for j in range(1,i+1): 
        print("*", end="") 
    print()

Ans 98:
rows=int(input("enter no of rows"))
for i in range(0,rows):
    for j in range(0,rows-i-1):
        print(end=" ")
    for j in range(0,i+1):
        print("*",end=" ")
    print( )


Ans 99:
n=int(input("Enter the number of rows: ")) 
for i in range(1,n+1): 
    for j in range(1,i+1): 
        print(j,end=" ")
    print()

Ans 100:
n=int(input("Enter the number of rows: ")) 
for i in range(1,n+1): 
    for j in range(1,i+1): 
        print(chr(64+i),end=" ")
    print()
